import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['animation', 'bandColor', 'close', 'colorName', 'dPeriod', 'dashArray', 'dataSource', 'enableComplexProperty', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];
let outputs = [];
/**
 * Indicator Directive
 * ```html
 * <e-indicators>
 * <e-indicator></e-indicator>
 * </e-indicators>
 * ```
 */
export class IndicatorDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
IndicatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: IndicatorDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
IndicatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: IndicatorDirective, selector: "e-indicators>e-indicator", inputs: { animation: "animation", bandColor: "bandColor", close: "close", colorName: "colorName", dPeriod: "dPeriod", dashArray: "dashArray", dataSource: "dataSource", enableComplexProperty: "enableComplexProperty", fastPeriod: "fastPeriod", field: "field", fill: "fill", high: "high", kPeriod: "kPeriod", low: "low", lowerLine: "lowerLine", macdLine: "macdLine", macdNegativeColor: "macdNegativeColor", macdPositiveColor: "macdPositiveColor", macdType: "macdType", open: "open", overBought: "overBought", overSold: "overSold", period: "period", periodLine: "periodLine", pointColorMapping: "pointColorMapping", query: "query", segmentAxis: "segmentAxis", segments: "segments", seriesName: "seriesName", showZones: "showZones", slowPeriod: "slowPeriod", standardDeviation: "standardDeviation", type: "type", upperLine: "upperLine", visible: "visible", volume: "volume", width: "width", xAxisName: "xAxisName", xName: "xName", yAxisName: "yAxisName" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: IndicatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-indicators>e-indicator',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Indicator Array Directive
 * @private
 */
export class IndicatorsDirective extends ArrayBase {
    constructor() {
        super('indicators');
    }
}
IndicatorsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: IndicatorsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
IndicatorsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: IndicatorsDirective, selector: "ej-chart>e-indicators", queries: [{ propertyName: "children", predicate: IndicatorDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: IndicatorsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-chart>e-indicators',
                    queries: {
                        children: new ContentChildren(IndicatorDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kaWNhdG9ycy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2hhcnQvaW5kaWNhdG9ycy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUloRixJQUFJLEtBQUssR0FBYSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNyaEIsSUFBSSxPQUFPLEdBQWEsRUFBRSxDQUFDO0FBQzNCOzs7Ozs7O0dBT0c7QUFTSCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsV0FBK0I7SUF1Tm5FLFlBQW9CLGdCQUFpQztRQUNqRCxLQUFLLEVBQUUsQ0FBQztRQURRLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFFakQsUUFBUSxDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFDbkMsQ0FBQzs7K0dBNU5RLGtCQUFrQjttR0FBbEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBUjlCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsTUFBTSxFQUFFLEtBQUs7b0JBQ2IsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLE9BQU8sRUFBRSxFQUVSO2lCQUNKOztBQWdPRDs7O0dBR0c7QUFPSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsU0FBOEI7SUFDbkU7UUFDSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7Z0hBSFEsbUJBQW1CO29HQUFuQixtQkFBbUIsc0ZBSE0sa0JBQWtCOzJGQUczQyxtQkFBbUI7a0JBTi9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsT0FBTyxFQUFFO3dCQUNMLFFBQVEsRUFBRSxJQUFJLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQztxQkFDcEQ7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFZpZXdDb250YWluZXJSZWYsIENvbnRlbnRDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSwgc2V0VmFsdWUgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcblxuXG5cbmxldCBpbnB1dDogc3RyaW5nW10gPSBbJ2FuaW1hdGlvbicsICdiYW5kQ29sb3InLCAnY2xvc2UnLCAnY29sb3JOYW1lJywgJ2RQZXJpb2QnLCAnZGFzaEFycmF5JywgJ2RhdGFTb3VyY2UnLCAnZW5hYmxlQ29tcGxleFByb3BlcnR5JywgJ2Zhc3RQZXJpb2QnLCAnZmllbGQnLCAnZmlsbCcsICdoaWdoJywgJ2tQZXJpb2QnLCAnbG93JywgJ2xvd2VyTGluZScsICdtYWNkTGluZScsICdtYWNkTmVnYXRpdmVDb2xvcicsICdtYWNkUG9zaXRpdmVDb2xvcicsICdtYWNkVHlwZScsICdvcGVuJywgJ292ZXJCb3VnaHQnLCAnb3ZlclNvbGQnLCAncGVyaW9kJywgJ3BlcmlvZExpbmUnLCAncG9pbnRDb2xvck1hcHBpbmcnLCAncXVlcnknLCAnc2VnbWVudEF4aXMnLCAnc2VnbWVudHMnLCAnc2VyaWVzTmFtZScsICdzaG93Wm9uZXMnLCAnc2xvd1BlcmlvZCcsICdzdGFuZGFyZERldmlhdGlvbicsICd0eXBlJywgJ3VwcGVyTGluZScsICd2aXNpYmxlJywgJ3ZvbHVtZScsICd3aWR0aCcsICd4QXhpc05hbWUnLCAneE5hbWUnLCAneUF4aXNOYW1lJ107XG5sZXQgb3V0cHV0czogc3RyaW5nW10gPSBbXTtcbi8qKlxuICogSW5kaWNhdG9yIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtaW5kaWNhdG9ycz5cbiAqIDxlLWluZGljYXRvcj48L2UtaW5kaWNhdG9yPlxuICogPC9lLWluZGljYXRvcnM+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdlLWluZGljYXRvcnM+ZS1pbmRpY2F0b3InLFxuICAgIGlucHV0czogaW5wdXQsXG4gICAgb3V0cHV0czogb3V0cHV0cywgICAgXG4gICAgcXVlcmllczoge1xuXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBJbmRpY2F0b3JEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxJbmRpY2F0b3JEaXJlY3RpdmU+IHtcbiAgICBwdWJsaWMgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcblx0XG5cblxuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSB0eXBlIG9mIHRoZSB0ZWNobmljYWwgaW5kaWNhdG9yXG4gICAgICogQGRlZmF1bHQgJ1NtYSdcbiAgICAgKi9cbiAgICBwdWJsaWMgdHlwZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBPcHRpb25zIHRvIGN1c3RvbWl6aW5nIGFuaW1hdGlvbiBmb3IgdGhlIHNlcmllcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYW5pbWF0aW9uOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIE9wdGlvbnMgZm9yIGN1c3RvbWl6aW5nIHRoZSBCb2xsaW5nZXJCYW5kIGluIHRoZSBpbmRpY2F0b3IuXG4gICAgICogQGRlZmF1bHQgJ3JnYmEoMjExLDIxMSwyMTEsMC4yNSknXG4gICAgICovXG4gICAgcHVibGljIGJhbmRDb2xvcjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgRGF0YVNvdXJjZSBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBjbG9zZSB2YWx1ZSBvZiB5IFxuICAgICAqIEl0IGlzIGFwcGxpY2FibGUgZm9yIHNlcmllcyBhbmQgdGVjaG5pY2FsIGluZGljYXRvcnNcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBjbG9zZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgRGF0YSBTb3VyY2UgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY29sb3IgbWFwcGluZyB2YWx1ZS4gXG4gICAgICogSXQgaXMgYXBwbGljYWJsZSBmb3IgcmFuZ2UgY29sb3IgbWFwcGluZyBwcm9wZXJseS5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29sb3JOYW1lOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIHBlcmlvZCwgdGhlIHByaWNlIGNoYW5nZXMgb3ZlciB3aGljaCB3aWxsIGRlZmluZSB0aGUgJUQgdmFsdWUgaW4gc3RvY2hhc3RpYyBpbmRpY2F0b3JzXG4gICAgICogQGRlZmF1bHQgM1xuICAgICAqL1xuICAgIHB1YmxpYyBkUGVyaW9kOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIHBhdHRlcm4gb2YgZGFzaGVzIGFuZCBnYXBzIHRvIHN0cm9rZSB0aGUgbGluZXMgaW4gYExpbmVgIHR5cGUgc2VyaWVzLlxuICAgICAqIEBkZWZhdWx0ICcwJ1xuICAgICAqL1xuICAgIHB1YmxpYyBkYXNoQXJyYXk6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBEYXRhU291cmNlIGZvciB0aGUgc2VyaWVzLiBJdCBjYW4gYmUgYW4gYXJyYXkgb2YgSlNPTiBvYmplY3RzIG9yIGFuIGluc3RhbmNlIG9mIERhdGFNYW5hZ2VyLiBcbiAgICAgKiBcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBkYXRhU291cmNlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFRoaXMgcHJvcGVydHkgdXNlZCB0byBpbXByb3ZlIGNoYXJ0IHBlcmZvcm1hbmNlIHZpYSBkYXRhIG1hcHBpbmcgZm9yIHNlcmllcyBkYXRhU291cmNlLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZUNvbXBsZXhQcm9wZXJ0eTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIHRoZSBmYXN0IHBlcmlvZCB0byBkZWZpbmUgdGhlIE1hY2QgbGluZVxuICAgICAqIEBkZWZhdWx0IDI2XG4gICAgICovXG4gICAgcHVibGljIGZhc3RQZXJpb2Q6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgZmllbGQgdG8gY29tcGFyZSB0aGUgY3VycmVudCB2YWx1ZSB3aXRoIHByZXZpb3VzIHZhbHVlc1xuICAgICAqIEBkZWZhdWx0ICdDbG9zZSdcbiAgICAgKi9cbiAgICBwdWJsaWMgZmllbGQ6IGFueTtcbiAgICAvKiogXG4gICAgICogVGhlIGZpbGwgY29sb3IgZm9yIHRoZSBzZXJpZXMgdGhhdCBhY2NlcHRzIHZhbHVlIGluIGhleCBhbmQgcmdiYSBhcyBhIHZhbGlkIENTUyBjb2xvciBzdHJpbmcuIFxuICAgICAqIEl0IGFsc28gcmVwcmVzZW50cyB0aGUgY29sb3Igb2YgdGhlIHNpZ25hbCBsaW5lcyBpbiB0ZWNobmljYWwgaW5kaWNhdG9ycy4gXG4gICAgICogRm9yIHRlY2huaWNhbCBpbmRpY2F0b3JzLCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyAnYmx1ZScgYW5kIGZvciBzZXJpZXMsIGl0IGhhcyBudWxsLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgZmlsbDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgRGF0YVNvdXJjZSBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBoaWdoIHZhbHVlIG9mIHkgXG4gICAgICogSXQgaXMgYXBwbGljYWJsZSBmb3Igc2VyaWVzIGFuZCB0ZWNobmljYWwgaW5kaWNhdG9yc1xuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgcHVibGljIGhpZ2g6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgbG9vayBiYWNrIHBlcmlvZCwgdGhlIHByaWNlIGNoYW5nZXMgb3ZlciB3aGljaCB3aWxsIGRlZmluZSB0aGUgJUsgdmFsdWUgaW4gc3RvY2hhc3RpYyBpbmRpY2F0b3JzXG4gICAgICogQGRlZmF1bHQgMTRcbiAgICAgKi9cbiAgICBwdWJsaWMga1BlcmlvZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgRGF0YVNvdXJjZSBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBsb3cgdmFsdWUgb2YgeSBcbiAgICAgKiBJdCBpcyBhcHBsaWNhYmxlIGZvciBzZXJpZXMgYW5kIHRlY2huaWNhbCBpbmRpY2F0b3JzXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgbG93OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGFwcGVhcmFuY2Ugb2YgbG93ZXIgbGluZSBpbiB0ZWNobmljYWwgaW5kaWNhdG9yc1xuICAgICAqL1xuICAgIHB1YmxpYyBsb3dlckxpbmU6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgdGhlIE1hY2RMaW5lIG9mIE1hY2QgaW5kaWNhdG9yXG4gICAgICogQGRlZmF1bHQgeyBjb2xvcjogJyNmZjk5MzMnLCB3aWR0aDogMiB9XG4gICAgICovXG4gICAgcHVibGljIG1hY2RMaW5lOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGNvbG9yIG9mIHRoZSBuZWdhdGl2ZSBiYXJzIGluIE1hY2QgaW5kaWNhdG9yc1xuICAgICAqIEBkZWZhdWx0ICcjZTc0YzNkJ1xuICAgICAqL1xuICAgIHB1YmxpYyBtYWNkTmVnYXRpdmVDb2xvcjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2xvciBvZiB0aGUgcG9zaXRpdmUgYmFycyBpbiBNYWNkIGluZGljYXRvcnNcbiAgICAgKiBAZGVmYXVsdCAnIzJlY2Q3MSdcbiAgICAgKi9cbiAgICBwdWJsaWMgbWFjZFBvc2l0aXZlQ29sb3I6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgdHlwZSBvZiB0aGUgTWFjZCBpbmRpY2F0b3IuXG4gICAgICogQGRlZmF1bHQgJ0JvdGgnXG4gICAgICovXG4gICAgcHVibGljIG1hY2RUeXBlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFRoZSBEYXRhU291cmNlIGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIG9wZW4gdmFsdWUgb2YgeSBcbiAgICAgKiBJdCBpcyBhcHBsaWNhYmxlIGZvciBzZXJpZXMgYW5kIHRlY2huaWNhbCBpbmRpY2F0b3JzXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgb3BlbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBvdmVyLWJvdWdodCh0aHJlc2hvbGQpIHZhbHVlcy4gSXQgaXMgYXBwbGljYWJsZSBmb3IgUlNJIGFuZCBzdG9jaGFzdGljIGluZGljYXRvcnNcbiAgICAgKiBAZGVmYXVsdCA4MFxuICAgICAqL1xuICAgIHB1YmxpYyBvdmVyQm91Z2h0OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIG92ZXItc29sZCh0aHJlc2hvbGQpIHZhbHVlcy4gSXQgaXMgYXBwbGljYWJsZSBmb3IgUlNJIGFuZCBzdG9jaGFzdGljIGluZGljYXRvcnNcbiAgICAgKiBAZGVmYXVsdCAyMFxuICAgICAqL1xuICAgIHB1YmxpYyBvdmVyU29sZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBwZXJpb2QsIHRoZSBwcmljZSBjaGFuZ2VzIG92ZXIgd2hpY2ggd2lsbCBiZSBjb25zaWRlcmVkIHRvIHByZWRpY3QgdGhlIHRyZW5kXG4gICAgICogQGRlZmF1bHQgMTRcbiAgICAgKi9cbiAgICBwdWJsaWMgcGVyaW9kOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGFwcGVhcmFuY2Ugb2YgcGVyaW9kIGxpbmUgaW4gdGVjaG5pY2FsIGluZGljYXRvcnNcbiAgICAgKi9cbiAgICBwdWJsaWMgcGVyaW9kTGluZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgRGF0YVNvdXJjZSBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBjb2xvciB2YWx1ZSBvZiBwb2ludCBcbiAgICAgKiBJdCBpcyBhcHBsaWNhYmxlIGZvciBzZXJpZXNcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBwb2ludENvbG9yTWFwcGluZzogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgcXVlcnkgdG8gc2VsZWN0IGRhdGEgZnJvbSBEYXRhU291cmNlLiBUaGlzIHByb3BlcnR5IGlzIGFwcGxpY2FibGUgb25seSB3aGVuIHRoZSBEYXRhU291cmNlIGlzIGBlai5EYXRhTWFuYWdlcmAuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgcXVlcnk6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgYXhpcywgYmFzZWQgb24gd2hpY2ggdGhlIGxpbmUgc2VyaWVzIHdpbGwgYmUgc3BsaXQuXG4gICAgICovXG4gICAgcHVibGljIHNlZ21lbnRBeGlzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGNvbGxlY3Rpb24gb2YgcmVnaW9ucyB0aGF0IGhlbHBzIHRvIGRpZmZlcmVudGlhdGUgYSBsaW5lIHNlcmllcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VnbWVudHM6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgc2VyaWVzLCB0aGUgZGF0YSBvZiB3aGljaCBoYXMgdG8gYmUgZGVwaWN0ZWQgYXMgaW5kaWNhdG9yXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgc2VyaWVzTmFtZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBFbmFibGVzL0Rpc2FibGVzIHRoZSBvdmVyLWJvdWdodCBhbmQgb3Zlci1zb2xkIHJlZ2lvbnNcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgcHVibGljIHNob3dab25lczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIHRoZSBzbG93IHBlcmlvZCB0byBkZWZpbmUgdGhlIE1hY2QgbGluZVxuICAgICAqIEBkZWZhdWx0IDEyXG4gICAgICovXG4gICAgcHVibGljIHNsb3dQZXJpb2Q6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyB0aGUgc3RhbmRhcmQgZGV2aWF0aW9uIHZhbHVlcyB0aGF0IGhlbHBzIHRvIGRlZmluZSB0aGUgdXBwZXIgYW5kIGxvd2VyIGJvbGxpbmdlciBiYW5kc1xuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhbmRhcmREZXZpYXRpb246IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgdXBwZXIgbGluZSBpbiB0ZWNobmljYWwgaW5kaWNhdG9yc1xuICAgICAqL1xuICAgIHB1YmxpYyB1cHBlckxpbmU6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSB2aXNpYmlsaXR5IG9mIHNlcmllcy5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgcHVibGljIHZpc2libGU6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgZGF0YSBzb3VyY2UgZmllbGQgdGhhdCBjb250YWlucyB0aGUgdm9sdW1lIHZhbHVlIGluIGNhbmRsZSBjaGFydHMgXG4gICAgICogSXQgaXMgYXBwbGljYWJsZSBmb3IgZmluYW5jaWFsIHNlcmllcyBhbmQgdGVjaG5pY2FsIGluZGljYXRvcnNcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyB2b2x1bWU6IGFueTtcbiAgICAvKiogXG4gICAgICogVGhlIHN0cm9rZSB3aWR0aCBmb3IgdGhlIHNlcmllcyB0aGF0IGlzIGFwcGxpY2FibGUgb25seSBmb3IgYExpbmVgIHR5cGUgc2VyaWVzLiBcbiAgICAgKiBJdCBhbHNvIHJlcHJlc2VudHMgdGhlIHN0cm9rZSB3aWR0aCBvZiB0aGUgc2lnbmFsIGxpbmVzIGluIHRlY2huaWNhbCBpbmRpY2F0b3JzLlxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBwdWJsaWMgd2lkdGg6IGFueTtcbiAgICAvKiogXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGhvcml6b250YWwgYXhpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNlcmllcy4gSXQgcmVxdWlyZXMgYGF4ZXNgIG9mIHRoZSBjaGFydC4gXG4gICAgICogSXQgaXMgYXBwbGljYWJsZSBmb3Igc2VyaWVzIGFuZCB0ZWNobmljYWwgaW5kaWNhdG9ycyBcbiAgICAgKiBcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgcHVibGljIHhBeGlzTmFtZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgRGF0YVNvdXJjZSBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSB4IHZhbHVlLiBcbiAgICAgKiBJdCBpcyBhcHBsaWNhYmxlIGZvciBzZXJpZXMgYW5kIHRlY2huaWNhbCBpbmRpY2F0b3JzXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgeE5hbWU6IGFueTtcbiAgICAvKiogXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHZlcnRpY2FsIGF4aXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZXJpZXMuIEl0IHJlcXVpcmVzIGBheGVzYCBvZiB0aGUgY2hhcnQuIFxuICAgICAqIEl0IGlzIGFwcGxpY2FibGUgZm9yIHNlcmllcyBhbmQgdGVjaG5pY2FsIGluZGljYXRvcnMgXG4gICAgICogXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyB5QXhpc05hbWU6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjpWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHNldFZhbHVlKCdjdXJyZW50SW5zdGFuY2UnLCB0aGlzLCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKG91dHB1dHMpO1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZVByb3BMaXN0ID0gaW5wdXQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEluZGljYXRvciBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZWotY2hhcnQ+ZS1pbmRpY2F0b3JzJyxcbiAgICBxdWVyaWVzOiB7XG4gICAgICAgIGNoaWxkcmVuOiBuZXcgQ29udGVudENoaWxkcmVuKEluZGljYXRvckRpcmVjdGl2ZSlcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBJbmRpY2F0b3JzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPEluZGljYXRvcnNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2luZGljYXRvcnMnKTtcbiAgICB9XG59Il19