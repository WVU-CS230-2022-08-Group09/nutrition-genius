import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { StripLinesDirective } from './striplines.directive';
import { MultiLevelLabelsDirective } from './multilevellabels.directive';
import * as i0 from "@angular/core";
let input = ['border', 'coefficient', 'columnIndex', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableScrollbarOnZooming', 'enableTrim', 'interval', 'intervalType', 'isIndexed', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPadding', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineBreakAlignment', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'multiLevelLabels', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'plotOffsetBottom', 'plotOffsetLeft', 'plotOffsetRight', 'plotOffsetTop', 'rangePadding', 'rowIndex', 'scrollbarSettings', 'skeleton', 'skeletonType', 'span', 'startAngle', 'startFromZero', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titlePadding', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];
let outputs = [];
/**
 * Axis Directive
 * ```html
 * <e-axes><e-axis></e-axis></e-axes>
 * ```
 */
export class AxisDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['stripLines', 'multiLevelLabels'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
AxisDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxisDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
AxisDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: AxisDirective, selector: "e-axes>e-axis", inputs: { border: "border", coefficient: "coefficient", columnIndex: "columnIndex", crossesAt: "crossesAt", crossesInAxis: "crossesInAxis", crosshairTooltip: "crosshairTooltip", description: "description", desiredIntervals: "desiredIntervals", edgeLabelPlacement: "edgeLabelPlacement", enableAutoIntervalOnZooming: "enableAutoIntervalOnZooming", enableScrollbarOnZooming: "enableScrollbarOnZooming", enableTrim: "enableTrim", interval: "interval", intervalType: "intervalType", isIndexed: "isIndexed", isInversed: "isInversed", labelFormat: "labelFormat", labelIntersectAction: "labelIntersectAction", labelPadding: "labelPadding", labelPlacement: "labelPlacement", labelPosition: "labelPosition", labelRotation: "labelRotation", labelStyle: "labelStyle", lineBreakAlignment: "lineBreakAlignment", lineStyle: "lineStyle", logBase: "logBase", majorGridLines: "majorGridLines", majorTickLines: "majorTickLines", maximum: "maximum", maximumLabelWidth: "maximumLabelWidth", maximumLabels: "maximumLabels", minimum: "minimum", minorGridLines: "minorGridLines", minorTickLines: "minorTickLines", minorTicksPerInterval: "minorTicksPerInterval", multiLevelLabels: "multiLevelLabels", name: "name", opposedPosition: "opposedPosition", placeNextToAxisLine: "placeNextToAxisLine", plotOffset: "plotOffset", plotOffsetBottom: "plotOffsetBottom", plotOffsetLeft: "plotOffsetLeft", plotOffsetRight: "plotOffsetRight", plotOffsetTop: "plotOffsetTop", rangePadding: "rangePadding", rowIndex: "rowIndex", scrollbarSettings: "scrollbarSettings", skeleton: "skeleton", skeletonType: "skeletonType", span: "span", startAngle: "startAngle", startFromZero: "startFromZero", stripLines: "stripLines", tabIndex: "tabIndex", tickPosition: "tickPosition", title: "title", titlePadding: "titlePadding", titleStyle: "titleStyle", valueType: "valueType", visible: "visible", zoomFactor: "zoomFactor", zoomPosition: "zoomPosition" }, queries: [{ propertyName: "childStripLines", first: true, predicate: StripLinesDirective, descendants: true }, { propertyName: "childMultiLevelLabels", first: true, predicate: MultiLevelLabelsDirective, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxisDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-axes>e-axis',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childStripLines: new ContentChild(StripLinesDirective),
                        childMultiLevelLabels: new ContentChild(MultiLevelLabelsDirective)
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Axis Array Directive
 * @private
 */
export class AxesDirective extends ArrayBase {
    constructor() {
        super('axes');
    }
}
AxesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxesDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AxesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: AxesDirective, selector: "ejs-chart>e-axes", queries: [{ propertyName: "children", predicate: AxisDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ejs-chart>e-axes',
                    queries: {
                        children: new ContentChildren(AxisDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhlcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2hhcnQvYXhlcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFFekUsSUFBSSxLQUFLLEdBQWEsQ0FBQyxRQUFRLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSw2QkFBNkIsRUFBRSwwQkFBMEIsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxzQkFBc0IsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdmdDLElBQUksT0FBTyxHQUFhLEVBQUUsQ0FBQztBQUMzQjs7Ozs7R0FLRztBQVVILE1BQU0sT0FBTyxhQUFjLFNBQVEsV0FBMEI7SUEwVnpELFlBQW9CLGdCQUFpQztRQUNqRCxLQUFLLEVBQUUsQ0FBQztRQURRLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFyVjlDLFNBQUksR0FBYSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBdVZ2RCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUNuQyxDQUFDOzswR0EvVlEsYUFBYTs4RkFBYixhQUFhLGs5REFKZ0IsbUJBQW1CLHdGQUNiLHlCQUF5QjsyRkFHNUQsYUFBYTtrQkFUekIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsTUFBTSxFQUFFLEtBQUs7b0JBQ2IsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLE9BQU8sRUFBRTt3QkFDTCxlQUFlLEVBQUUsSUFBSSxZQUFZLENBQUMsbUJBQW1CLENBQUM7d0JBQ3RELHFCQUFxQixFQUFFLElBQUksWUFBWSxDQUFDLHlCQUF5QixDQUFDO3FCQUNyRTtpQkFDSjs7QUFtV0Q7OztHQUdHO0FBT0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxTQUF3QjtJQUN2RDtRQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQixDQUFDOzswR0FIUSxhQUFhOzhGQUFiLGFBQWEsaUZBSFksYUFBYTsyRkFHdEMsYUFBYTtrQkFOekIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixPQUFPLEVBQUU7d0JBQ0wsUUFBUSxFQUFFLElBQUksZUFBZSxDQUFDLGFBQWEsQ0FBQztxQkFDL0M7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFZpZXdDb250YWluZXJSZWYsIENvbnRlbnRDaGlsZHJlbiwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlLCBzZXRWYWx1ZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuXG5pbXBvcnQgeyBTdHJpcExpbmVzRGlyZWN0aXZlIH0gZnJvbSAnLi9zdHJpcGxpbmVzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNdWx0aUxldmVsTGFiZWxzRGlyZWN0aXZlIH0gZnJvbSAnLi9tdWx0aWxldmVsbGFiZWxzLmRpcmVjdGl2ZSc7XG5cbmxldCBpbnB1dDogc3RyaW5nW10gPSBbJ2JvcmRlcicsICdjb2VmZmljaWVudCcsICdjb2x1bW5JbmRleCcsICdjcm9zc2VzQXQnLCAnY3Jvc3Nlc0luQXhpcycsICdjcm9zc2hhaXJUb29sdGlwJywgJ2Rlc2NyaXB0aW9uJywgJ2Rlc2lyZWRJbnRlcnZhbHMnLCAnZWRnZUxhYmVsUGxhY2VtZW50JywgJ2VuYWJsZUF1dG9JbnRlcnZhbE9uWm9vbWluZycsICdlbmFibGVTY3JvbGxiYXJPblpvb21pbmcnLCAnZW5hYmxlVHJpbScsICdpbnRlcnZhbCcsICdpbnRlcnZhbFR5cGUnLCAnaXNJbmRleGVkJywgJ2lzSW52ZXJzZWQnLCAnbGFiZWxGb3JtYXQnLCAnbGFiZWxJbnRlcnNlY3RBY3Rpb24nLCAnbGFiZWxQYWRkaW5nJywgJ2xhYmVsUGxhY2VtZW50JywgJ2xhYmVsUG9zaXRpb24nLCAnbGFiZWxSb3RhdGlvbicsICdsYWJlbFN0eWxlJywgJ2xpbmVCcmVha0FsaWdubWVudCcsICdsaW5lU3R5bGUnLCAnbG9nQmFzZScsICdtYWpvckdyaWRMaW5lcycsICdtYWpvclRpY2tMaW5lcycsICdtYXhpbXVtJywgJ21heGltdW1MYWJlbFdpZHRoJywgJ21heGltdW1MYWJlbHMnLCAnbWluaW11bScsICdtaW5vckdyaWRMaW5lcycsICdtaW5vclRpY2tMaW5lcycsICdtaW5vclRpY2tzUGVySW50ZXJ2YWwnLCAnbXVsdGlMZXZlbExhYmVscycsICduYW1lJywgJ29wcG9zZWRQb3NpdGlvbicsICdwbGFjZU5leHRUb0F4aXNMaW5lJywgJ3Bsb3RPZmZzZXQnLCAncGxvdE9mZnNldEJvdHRvbScsICdwbG90T2Zmc2V0TGVmdCcsICdwbG90T2Zmc2V0UmlnaHQnLCAncGxvdE9mZnNldFRvcCcsICdyYW5nZVBhZGRpbmcnLCAncm93SW5kZXgnLCAnc2Nyb2xsYmFyU2V0dGluZ3MnLCAnc2tlbGV0b24nLCAnc2tlbGV0b25UeXBlJywgJ3NwYW4nLCAnc3RhcnRBbmdsZScsICdzdGFydEZyb21aZXJvJywgJ3N0cmlwTGluZXMnLCAndGFiSW5kZXgnLCAndGlja1Bvc2l0aW9uJywgJ3RpdGxlJywgJ3RpdGxlUGFkZGluZycsICd0aXRsZVN0eWxlJywgJ3ZhbHVlVHlwZScsICd2aXNpYmxlJywgJ3pvb21GYWN0b3InLCAnem9vbVBvc2l0aW9uJ107XG5sZXQgb3V0cHV0czogc3RyaW5nW10gPSBbXTtcbi8qKlxuICogQXhpcyBEaXJlY3RpdmVcbiAqIGBgYGh0bWxcbiAqIDxlLWF4ZXM+PGUtYXhpcz48L2UtYXhpcz48L2UtYXhlcz5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2UtYXhlcz5lLWF4aXMnLFxuICAgIGlucHV0czogaW5wdXQsXG4gICAgb3V0cHV0czogb3V0cHV0cywgICAgXG4gICAgcXVlcmllczoge1xuICAgICAgICBjaGlsZFN0cmlwTGluZXM6IG5ldyBDb250ZW50Q2hpbGQoU3RyaXBMaW5lc0RpcmVjdGl2ZSksIFxuICAgICAgICBjaGlsZE11bHRpTGV2ZWxMYWJlbHM6IG5ldyBDb250ZW50Q2hpbGQoTXVsdGlMZXZlbExhYmVsc0RpcmVjdGl2ZSlcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIEF4aXNEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxBeGlzRGlyZWN0aXZlPiB7XG4gICAgcHVibGljIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG5cdFxuICAgIHB1YmxpYyBjaGlsZFN0cmlwTGluZXM6IGFueTtcbiAgICBwdWJsaWMgY2hpbGRNdWx0aUxldmVsTGFiZWxzOiBhbnk7XG4gICAgcHVibGljIHRhZ3M6IHN0cmluZ1tdID0gWydzdHJpcExpbmVzJywgJ211bHRpTGV2ZWxMYWJlbHMnXTtcbiAgICAvKiogXG4gICAgICogQm9yZGVyIG9mIHRoZSBtdWx0aSBsZXZlbCBsYWJlbHMuXG4gICAgICovXG4gICAgcHVibGljIGJvcmRlcjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgcG9sYXIgcmFkYXIgcmFkaXVzIHBvc2l0aW9uLlxuICAgICAqIEBkZWZhdWx0IDEwMFxuICAgICAqL1xuICAgIHB1YmxpYyBjb2VmZmljaWVudDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGluZGV4IG9mIHRoZSBjb2x1bW4gd2hlcmUgdGhlIGF4aXMgaXMgYXNzb2NpYXRlZCwgXG4gICAgICogd2hlbiB0aGUgY2hhcnQgYXJlYSBpcyBkaXZpZGVkIGludG8gbXVsdGlwbGUgcGxvdCBhcmVhcyBieSB1c2luZyBgY29sdW1uc2AuIFxuICAgICAqIFxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBwdWJsaWMgY29sdW1uSW5kZXg6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSBhdCB3aGljaCB0aGUgYXhpcyBsaW5lIGhhcyB0byBiZSBpbnRlcnNlY3Qgd2l0aCB0aGUgdmVydGljYWwgYXhpcyBvciB2aWNlIHZlcnNhLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgY3Jvc3Nlc0F0OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyBheGlzIG5hbWUgd2l0aCB3aGljaCB0aGUgYXhpcyBsaW5lIGhhcyB0byBiZSBjcm9zc2VkXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBjcm9zc2VzSW5BeGlzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIE9wdGlvbnMgdG8gY3VzdG9taXplIHRoZSBjcm9zc2hhaXIgVG9vbFRpcC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3Jvc3NoYWlyVG9vbHRpcDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZXNjcmlwdGlvbiBmb3IgYXhpcyBhbmQgaXRzIGVsZW1lbnQuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBXaXRoIHRoaXMgcHJvcGVydHksIHlvdSBjYW4gcmVxdWVzdCBheGlzIHRvIGNhbGN1bGF0ZSBpbnRlcnZhbHMgYXBwcm94aW1hdGVseSBlcXVhbCB0byB5b3VyIHNwZWNpZmllZCBpbnRlcnZhbC5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZSBcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzaXJlZEludGVydmFsczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHBvc2l0aW9uIG9mIGxhYmVscyBhdCB0aGUgZWRnZSBvZiB0aGUgYXhpcy5UaGV5IGFyZSwgXG4gICAgICogKiBOb25lOiBObyBhY3Rpb24gd2lsbCBiZSBwZXJmb3JtZWQuIFxuICAgICAqICogSGlkZTogRWRnZSBsYWJlbCB3aWxsIGJlIGhpZGRlbi4gXG4gICAgICogKiBTaGlmdDogU2hpZnRzIHRoZSBlZGdlIGxhYmVscy5cbiAgICAgKiBAZGVmYXVsdCAnTm9uZSdcbiAgICAgKi9cbiAgICBwdWJsaWMgZWRnZUxhYmVsUGxhY2VtZW50OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIElmIHNldCB0byB0cnVlLCBheGlzIGludGVydmFsIHdpbGwgYmUgY2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IHdpdGggcmVzcGVjdCB0byB0aGUgem9vbWVkIHJhbmdlLlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5hYmxlQXV0b0ludGVydmFsT25ab29taW5nOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIEVuYWJsZXMgdGhlIHNjcm9sbGJhciBmb3Igem9vbWluZy5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZVNjcm9sbGJhck9uWm9vbWluZzogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIFRyaW0gcHJvcGVydHkgZm9yIGFuIGF4aXMuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5hYmxlVHJpbTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGludGVydmFsIGZvciBhbiBheGlzLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlIFxuICAgICAqL1xuICAgIHB1YmxpYyBpbnRlcnZhbDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHR5cGVzIGxpa2UgYFllYXJzYCwgYE1vbnRoc2AsIGBEYXlzYCwgYEhvdXJzYCwgYE1pbnV0ZXNgLCBgU2Vjb25kc2AgaW4gZGF0ZSB0aW1lIGF4aXMuVGhleSBhcmUsIFxuICAgICAqICogQXV0bzogRGVmaW5lcyB0aGUgaW50ZXJ2YWwgb2YgdGhlIGF4aXMgYmFzZWQgb24gZGF0YS4gXG4gICAgICogKiBZZWFyczogRGVmaW5lcyB0aGUgaW50ZXJ2YWwgb2YgdGhlIGF4aXMgaW4geWVhcnMuIFxuICAgICAqICogTW9udGhzOiBEZWZpbmVzIHRoZSBpbnRlcnZhbCBvZiB0aGUgYXhpcyBpbiBtb250aHMuIFxuICAgICAqICogRGF5czogRGVmaW5lcyB0aGUgaW50ZXJ2YWwgb2YgdGhlIGF4aXMgaW4gZGF5cy4gXG4gICAgICogKiBIb3VyczogRGVmaW5lcyB0aGUgaW50ZXJ2YWwgb2YgdGhlIGF4aXMgaW4gaG91cnMuIFxuICAgICAqICogTWludXRlczogRGVmaW5lcyB0aGUgaW50ZXJ2YWwgb2YgdGhlIGF4aXMgaW4gbWludXRlcy5cbiAgICAgKiBAZGVmYXVsdCAnQXV0bydcbiAgICAgKi9cbiAgICBwdWJsaWMgaW50ZXJ2YWxUeXBlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyBpbmRleGVkIGNhdGVnb3J5ICBheGlzLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcHVibGljIGlzSW5kZXhlZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBJdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgYXhpcyB0byBiZSByZW5kZXJlZCBpbiBpbnZlcnNlZCBtYW5uZXIgb3Igbm90LlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcHVibGljIGlzSW52ZXJzZWQ6IGFueTtcbiAgICAvKiogXG4gICAgICogVXNlZCB0byBmb3JtYXQgdGhlIGF4aXMgbGFiZWwgdGhhdCBhY2NlcHRzIGFueSBnbG9iYWwgc3RyaW5nIGZvcm1hdCBsaWtlICdDJywgJ24xJywgJ1AnIGV0Yy4gXG4gICAgICogSXQgYWxzbyBhY2NlcHRzIHBsYWNlaG9sZGVyIGxpa2UgJ3t2YWx1ZX3CsEMnIGluIHdoaWNoIHZhbHVlIHJlcHJlc2VudCB0aGUgYXhpcyBsYWJlbCwgZS5nLCAyMMKwQy5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBsYWJlbEZvcm1hdDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGFjdGlvbnMgbGlrZSBgTm9uZWAsIGBIaWRlYCwgYFRyaW1gLCBgV3JhcGAsIGBNdWx0aXBsZVJvd3NgLCBgUm90YXRlNDVgLCBhbmQgYFJvdGF0ZTkwYCBcbiAgICAgKiB3aGVuIHRoZSBheGlzIGxhYmVscyBpbnRlcnNlY3Qgd2l0aCBlYWNoIG90aGVyLlRoZXkgYXJlLCBcbiAgICAgKiAqIE5vbmU6IFNob3dzIGFsbCB0aGUgbGFiZWxzLiBcbiAgICAgKiAqIEhpZGU6IEhpZGVzIHRoZSBsYWJlbCB3aGVuIGl0IGludGVyc2VjdHMuIFxuICAgICAqICogVHJpbTogVHJpbSB0aGUgbGFiZWwgd2hlbiBpdCBpbnRlcnNlY3RzLiBcbiAgICAgKiAqIFdyYXA6IFdyYXAgdGhlIGxhYmVsIHdoZW4gaXQgaW50ZXJzZWN0cy4gXG4gICAgICogKiBNdWx0aXBsZVJvd3M6IFNob3dzIHRoZSBsYWJlbCBpbiBNdWx0aXBsZVJvd3Mgd2hlbiBpdCBpbnRlcnNlY3RzLiBcbiAgICAgKiAqIFJvdGF0ZTQ1OiBSb3RhdGVzIHRoZSBsYWJlbCB0byA0NSBkZWdyZWUgd2hlbiBpdCBpbnRlcnNlY3RzLiBcbiAgICAgKiAqIFJvdGF0ZTkwOiBSb3RhdGVzIHRoZSBsYWJlbCB0byA5MCBkZWdyZWUgd2hlbiBpdCBpbnRlcnNlY3RzLlxuICAgICAqIEBkZWZhdWx0IFRyaW1cbiAgICAgKi9cbiAgICBwdWJsaWMgbGFiZWxJbnRlcnNlY3RBY3Rpb246IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBsYWJlbFBhZGRpbmcgZnJvbSBheGlzXG4gICAgICogQGRlZmF1bHQgNVxuICAgICAqL1xuICAgIHB1YmxpYyBsYWJlbFBhZGRpbmc6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBwbGFjZW1lbnQgb2YgYSBsYWJlbCBmb3IgY2F0ZWdvcnkgYXhpcy4gVGhleSBhcmUsIFxuICAgICAqICogYmV0d2VlblRpY2tzOiBSZW5kZXJzIHRoZSBsYWJlbCBiZXR3ZWVuIHRoZSB0aWNrcy4gXG4gICAgICogKiBvblRpY2tzOiBSZW5kZXJzIHRoZSBsYWJlbCBvbiB0aGUgdGlja3MuXG4gICAgICogQGRlZmF1bHQgJ0JldHdlZW5UaWNrcydcbiAgICAgKi9cbiAgICBwdWJsaWMgbGFiZWxQbGFjZW1lbnQ6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBwbGFjZW1lbnQgb2YgYSBsYWJlbHMgdG8gdGhlIGF4aXMgbGluZS4gVGhleSBhcmUsIFxuICAgICAqICogaW5zaWRlOiBSZW5kZXJzIHRoZSBsYWJlbHMgaW5zaWRlIHRvIHRoZSBheGlzIGxpbmUuIFxuICAgICAqICogb3V0c2lkZTogUmVuZGVycyB0aGUgbGFiZWxzIG91dHNpZGUgdG8gdGhlIGF4aXMgbGluZS5cbiAgICAgKiBAZGVmYXVsdCAnT3V0c2lkZSdcbiAgICAgKi9cbiAgICBwdWJsaWMgbGFiZWxQb3NpdGlvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgYW5nbGUgdG8gd2hpY2ggdGhlIGF4aXMgbGFiZWwgZ2V0cyByb3RhdGVkLlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBwdWJsaWMgbGFiZWxSb3RhdGlvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBPcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgYXhpcyBsYWJlbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgbGFiZWxTdHlsZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBJdCBzcGVjaWZpZXMgYWxpZ25tZW50IG9mIHRoZSBsaW5lIGJyZWFrIGxhYmVscy5cbiAgICAgKiBAZGVmYXVsdCAnQ2VudGVyJ1xuICAgICAqL1xuICAgIHB1YmxpYyBsaW5lQnJlYWtBbGlnbm1lbnQ6IGFueTtcbiAgICAvKiogXG4gICAgICogT3B0aW9ucyBmb3IgY3VzdG9taXppbmcgYXhpcyBsaW5lcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgbGluZVN0eWxlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFRoZSBiYXNlIHZhbHVlIGZvciBsb2dhcml0aG1pYyBheGlzLiBJdCByZXF1aXJlcyBgdmFsdWVUeXBlYCB0byBiZSBgTG9nYXJpdGhtaWNgLlxuICAgICAqIEBkZWZhdWx0IDEwXG4gICAgICovXG4gICAgcHVibGljIGxvZ0Jhc2U6IGFueTtcbiAgICAvKiogXG4gICAgICogT3B0aW9ucyBmb3IgY3VzdG9taXppbmcgbWFqb3IgZ3JpZCBsaW5lcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWFqb3JHcmlkTGluZXM6IGFueTtcbiAgICAvKiogXG4gICAgICogT3B0aW9ucyBmb3IgY3VzdG9taXppbmcgbWFqb3IgdGljayBsaW5lcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWFqb3JUaWNrTGluZXM6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBtYXhpbXVtIHJhbmdlIG9mIGFuIGF4aXMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBtYXhpbXVtOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgbWF4aW11bSB3aWR0aCBvZiBhbiBheGlzIGxhYmVsLlxuICAgICAqIEBkZWZhdWx0IDM0LlxuICAgICAqL1xuICAgIHB1YmxpYyBtYXhpbXVtTGFiZWxXaWR0aDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgbGFiZWwgY291bnQgcGVyIDEwMCBwaXhlbHMgd2l0aCByZXNwZWN0IHRvIHRoZSBheGlzIGxlbmd0aC5cbiAgICAgKiBAZGVmYXVsdCAzXG4gICAgICovXG4gICAgcHVibGljIG1heGltdW1MYWJlbHM6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBtaW5pbXVtIHJhbmdlIG9mIGFuIGF4aXMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBtaW5pbXVtOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIE9wdGlvbnMgZm9yIGN1c3RvbWl6aW5nIG1pbm9yIGdyaWQgbGluZXMuXG4gICAgICovXG4gICAgcHVibGljIG1pbm9yR3JpZExpbmVzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIE9wdGlvbnMgZm9yIGN1c3RvbWl6aW5nIG1pbm9yIHRpY2sgbGluZXMuXG4gICAgICovXG4gICAgcHVibGljIG1pbm9yVGlja0xpbmVzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIG1pbm9yIHRpY2tzIHBlciBpbnRlcnZhbC5cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcHVibGljIG1pbm9yVGlja3NQZXJJbnRlcnZhbDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG11bHRpIGxldmVsIGxhYmVscyBjb2xsZWN0aW9uIGZvciB0aGUgYXhpc1xuICAgICAqL1xuICAgIHB1YmxpYyBtdWx0aUxldmVsTGFiZWxzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFVuaXF1ZSBpZGVudGlmaWVyIG9mIGFuIGF4aXMuIFxuICAgICAqIFRvIGFzc29jaWF0ZSBhbiBheGlzIHdpdGggdGhlIHNlcmllcywgc2V0IHRoaXMgbmFtZSB0byB0aGUgeEF4aXNOYW1lL3lBeGlzTmFtZSBwcm9wZXJ0aWVzIG9mIHRoZSBzZXJpZXMuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgbmFtZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGF4aXMgd2lsbCByZW5kZXIgYXQgdGhlIG9wcG9zaXRlIHNpZGUgb2YgaXRzIGRlZmF1bHQgcG9zaXRpb24uXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgb3Bwb3NlZFBvc2l0aW9uOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIGF4aXMgZWxlbWVudHMgbGlrZSBheGlzIGxhYmVscywgYXhpcyB0aXRsZSwgZXRjIGhhcyB0byBiZSBjcm9zc2VkIHdpdGggYXhpcyBsaW5lXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBwbGFjZU5leHRUb0F4aXNMaW5lOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIExlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgZm9yIHRoZSBwbG90IGFyZWEgaW4gcGl4ZWxzLlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBwdWJsaWMgcGxvdE9mZnNldDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBCb3R0b20gcGFkZGluZyBmb3IgdGhlIHBsb3QgYXJlYSBpbiBwaXhlbHMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBwbG90T2Zmc2V0Qm90dG9tOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIExlZnQgcGFkZGluZyBmb3IgdGhlIHBsb3QgYXJlYSBpbiBwaXhlbHMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBwbG90T2Zmc2V0TGVmdDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBSaWdodCBwYWRkaW5nIGZvciB0aGUgcGxvdCBhcmVhIGluIHBpeGVscy5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgcHVibGljIHBsb3RPZmZzZXRSaWdodDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUb3AgcGFkZGluZyBmb3IgdGhlIHBsb3QgYXJlYSBpbiBwaXhlbHMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBwbG90T2Zmc2V0VG9wOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgcGFkZGluZyBmb3IgdGhlIGF4aXMgcmFuZ2UgaW4gdGVybXMgb2YgaW50ZXJ2YWwuVGhleSBhcmUsIFxuICAgICAqICogbm9uZTogUGFkZGluZyBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgYXhpcy4gXG4gICAgICogKiBub3JtYWw6IFBhZGRpbmcgaXMgYXBwbGllZCB0byB0aGUgYXhpcyBiYXNlZCBvbiB0aGUgcmFuZ2UgY2FsY3VsYXRpb24uIFxuICAgICAqICogYWRkaXRpb25hbDogSW50ZXJ2YWwgb2YgdGhlIGF4aXMgaXMgYWRkZWQgYXMgcGFkZGluZyB0byB0aGUgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMgb2YgdGhlIHJhbmdlLiBcbiAgICAgKiAqIHJvdW5kOiBBeGlzIHJhbmdlIGlzIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgcG9zc2libGUgdmFsdWUgZGl2aWRlZCBieSB0aGUgaW50ZXJ2YWwuXG4gICAgICogQGRlZmF1bHQgJ0F1dG8nXG4gICAgICovXG4gICAgcHVibGljIHJhbmdlUGFkZGluZzogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGluZGV4IG9mIHRoZSByb3cgd2hlcmUgdGhlIGF4aXMgaXMgYXNzb2NpYXRlZCwgd2hlbiB0aGUgY2hhcnQgYXJlYSBpcyBkaXZpZGVkIGludG8gbXVsdGlwbGUgcGxvdCBhcmVhcyBieSB1c2luZyBgcm93c2AuIFxuICAgICAqIFxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBwdWJsaWMgcm93SW5kZXg6IGFueTtcbiAgICAvKiogXG4gICAgICogT3B0aW9uIHRvIGN1c3RvbWl6ZSBzY3JvbGxiYXIgd2l0aCBsYXp5IGxvYWRpbmdcbiAgICAgKi9cbiAgICBwdWJsaWMgc2Nyb2xsYmFyU2V0dGluZ3M6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBza2VsZXRvbiBmb3JtYXQgaW4gd2hpY2ggdGhlIGRhdGVUaW1lIGZvcm1hdCB3aWxsIHByb2Nlc3MuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgc2tlbGV0b246IGFueTtcbiAgICAvKiogXG4gICAgICogSXQgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGZvcm1hdCB0byBiZSB1c2VkIGluIGRhdGVUaW1lIGZvcm1hdCBwcm9jZXNzLlxuICAgICAqIEBkZWZhdWx0ICdEYXRlVGltZSdcbiAgICAgKiBAZGVwcmVjYXRlZCBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2tlbGV0b25UeXBlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIGBjb2x1bW5zYCBvciBgcm93c2AgYW4gYXhpcyBoYXMgdG8gc3BhbiBob3Jpem9udGFsbHkgb3IgdmVydGljYWxseS5cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgcHVibGljIHNwYW46IGFueTtcbiAgICAvKiogXG4gICAgICogVGhlIHN0YXJ0IGFuZ2xlIGZvciB0aGUgc2VyaWVzLlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRBbmdsZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBJdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgYXhpcyB0byBiZSBzdGFydCBmcm9tIHplcm8uXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFydEZyb21aZXJvOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgc3RyaXBMaW5lIGNvbGxlY3Rpb24gZm9yIHRoZSBheGlzXG4gICAgICovXG4gICAgcHVibGljIHN0cmlwTGluZXM6IGFueTtcbiAgICAvKiogXG4gICAgICogVGFiSW5kZXggdmFsdWUgZm9yIHRoZSBheGlzLlxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cbiAgICBwdWJsaWMgdGFiSW5kZXg6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBwbGFjZW1lbnQgb2YgYSB0aWNrcyB0byB0aGUgYXhpcyBsaW5lLiBUaGV5IGFyZSwgXG4gICAgICogKiBpbnNpZGU6IFJlbmRlcnMgdGhlIHRpY2tzIGluc2lkZSB0byB0aGUgYXhpcyBsaW5lLiBcbiAgICAgKiAqIG91dHNpZGU6IFJlbmRlcnMgdGhlIHRpY2tzIG91dHNpZGUgdG8gdGhlIGF4aXMgbGluZS5cbiAgICAgKiBAZGVmYXVsdCAnT3V0c2lkZSdcbiAgICAgKi9cbiAgICBwdWJsaWMgdGlja1Bvc2l0aW9uOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgdGl0bGUgb2YgYW4gYXhpcy5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyB0aXRsZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRpdGxlUGFkZGluZyBmcm9tIGF4aXMgbGFiZWxcbiAgICAgKiBAZGVmYXVsdCA1XG4gICAgICovXG4gICAgcHVibGljIHRpdGxlUGFkZGluZzogYW55O1xuICAgIC8qKiBcbiAgICAgKiBPcHRpb25zIGZvciBjdXN0b21pemluZyB0aGUgYXhpcyB0aXRsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgdGl0bGVTdHlsZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHR5cGUgb2YgZGF0YSB0aGUgYXhpcyBpcyBoYW5kbGluZy4gXG4gICAgICogKiBEb3VibGU6ICBSZW5kZXJzIGEgbnVtZXJpYyBheGlzLiBcbiAgICAgKiAqIERhdGVUaW1lOiBSZW5kZXJzIGEgZGF0ZVRpbWUgYXhpcy4gXG4gICAgICogKiBDYXRlZ29yeTogUmVuZGVycyBhIGNhdGVnb3J5IGF4aXMuIFxuICAgICAqICogTG9nYXJpdGhtaWM6IFJlbmRlcnMgYSBsb2cgYXhpcy5cbiAgICAgKiBAZGVmYXVsdCAnRG91YmxlJ1xuICAgICAqIEBibGF6b3J0eXBlIFN5bmNmdXNpb24uRUoyLkJsYXpvci5DaGFydHMuVmFsdWVUeXBlXG4gICAgICogQGlzZW51bWVyYXRpb24gdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyB2YWx1ZVR5cGU6IGFueTtcbiAgICAvKiogXG4gICAgICogSWYgc2V0IHRvIHRydWUsIGF4aXMgbGFiZWwgd2lsbCBiZSB2aXNpYmxlLlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgdmlzaWJsZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBUaGUgYXhpcyBpcyBzY2FsZWQgYnkgdGhpcyBmYWN0b3IuIFdoZW4gem9vbUZhY3RvciBpcyAwLjUsIHRoZSBjaGFydCBpcyBzY2FsZWQgYnkgMjAwJSBhbG9uZyB0aGlzIGF4aXMuIFZhbHVlIHJhbmdlcyBmcm9tIDAgdG8gMS5cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgcHVibGljIHpvb21GYWN0b3I6IGFueTtcbiAgICAvKiogXG4gICAgICogUG9zaXRpb24gb2YgdGhlIHpvb21lZCBheGlzLiBWYWx1ZSByYW5nZXMgZnJvbSAwIHRvIDEuXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHB1YmxpYyB6b29tUG9zaXRpb246IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjpWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHNldFZhbHVlKCdjdXJyZW50SW5zdGFuY2UnLCB0aGlzLCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKG91dHB1dHMpO1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZVByb3BMaXN0ID0gaW5wdXQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEF4aXMgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2Vqcy1jaGFydD5lLWF4ZXMnLFxuICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgY2hpbGRyZW46IG5ldyBDb250ZW50Q2hpbGRyZW4oQXhpc0RpcmVjdGl2ZSlcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBBeGVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPEF4ZXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2F4ZXMnKTtcbiAgICB9XG59Il19