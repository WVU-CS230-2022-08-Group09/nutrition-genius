import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['border', 'color', 'dashArray', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];
let outputs = [];
/**
 * StripLine Directive
 * ```html
 * <e-axis>
 * <e-striplines>
 * <e-stripline></e-stripline>
 * </e-striplines>
 * </e-axis>
 * ```
 */
export class StripLineDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
StripLineDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: StripLineDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
StripLineDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: StripLineDirective, selector: "e-axis>e-striplines>e-stripline", inputs: { border: "border", color: "color", dashArray: "dashArray", end: "end", horizontalAlignment: "horizontalAlignment", isRepeat: "isRepeat", isSegmented: "isSegmented", opacity: "opacity", repeatEvery: "repeatEvery", repeatUntil: "repeatUntil", rotation: "rotation", segmentAxisName: "segmentAxisName", segmentEnd: "segmentEnd", segmentStart: "segmentStart", size: "size", sizeType: "sizeType", start: "start", startFromAxis: "startFromAxis", text: "text", textStyle: "textStyle", verticalAlignment: "verticalAlignment", visible: "visible", zIndex: "zIndex" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: StripLineDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-axis>e-striplines>e-stripline',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * StripLine Array Directive
 * @private
 */
export class StripLinesDirective extends ArrayBase {
    constructor() {
        super('striplines');
    }
}
StripLinesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: StripLinesDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
StripLinesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: StripLinesDirective, selector: "e-axis>e-striplines", queries: [{ propertyName: "children", predicate: StripLineDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: StripLinesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-axis>e-striplines',
                    queries: {
                        children: new ContentChildren(StripLineDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,